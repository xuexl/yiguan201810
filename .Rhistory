{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>0,1,0)
}
return (r)
}
run(10)
run(10)
run(10)
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=0,1,0)
}
return (r)
}
run(30)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-1,1,0)
}
return (r)
}
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.5,1,0)
}
return (r)
}
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.3,1,0)
}
return (r)
}
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.4,1,0)
}
return (r)
}
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.2,1,0)
}
return (r)
}
run(40)
run(40)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.4,1,0)
}
return (r)
}
run(50)
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=-0.5,1,0)
}
return (r)
}
run(50)
runs<-run(50)
str(runs)
findruns<-function(x, k)
{
#check
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)])==1)
{
n<-n+1
r[n]<-i
}
}
if(n>0)
return (r[1:n])
else
return NULL
}
findruns<-function(x, k)
{
#check
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
return (r[1:n])
else
return NULL
}
findruns<-function(x, k)
{
#check
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
r<-r[1:n]
else
return NULL
return (r)
}
findruns<-function(x, k)
{
#check
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
r<-r[1:n]
else
r<-NULL
return (r)
}
findruns(runs,2)
runs
findruns(runs,3)
findruns(runs,4)
findruns(runs,5)
findruns(runs,6)
findruns(runs,0)
findruns(runs,1)
findruns<-function(x, k)
{
#check
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
r<-r[1:n]
else
return NULL
return (r)
}
class(runs)
attribute(runs)
class(1)
mode(1)
1:-1
typeof(1)
mode(1)
mode(1.0)
is.Integer(1)
is.integer(1)
findruns<-function(x, k)
{
#check
#x为整数值向量，长度大于等于k
#k大于0的整数
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
r<-r[1:n]
else
return (NULL)
return (r)
}
findruns<-function(x, k)
{
#check
#x为整数值向量，长度大于等于k
#k大于0的整数
l<-length(x)
r<-vector(length=l)
n<-0
for(i in 1:(l-k+1))
{
if(all(x[i:(i+k-1)]==1))
{
n<-n+1
r[n]<-i
}
}
if(n>0)
return (r[1:n])
else
return (NULL)
}
mode(runs)
class(runs)
typeof(runs)
runs
str(runs)
summary(runs)
runs<-run(500)
runs
run<-function(n)
{
r<-vector(length=n)
set.seed(1234)
for(i in 1:n)
{
r[i]<-ifelse(rnorm(1,mean=0,sd=1)>=0,1,0)
}
return (r)
}
run(500)
runs<-runs(500)
runs<-run(500)
runs
q()
q()
q()
head(train)
summary(train)
class(train)
mode(train)
mean(train@Age)
mean(train$Age)
train[is.na(train$Age)]
is.na(train$Age)
is.nan(train$Age)
mean(train$Age[!is.na(train$Age)])
train$Age[!is.na(train$Age)]
count(train$Age[!is.na(train$Age)])
length(train$Age[!is.na(train$Age)])
length(train$Age[is.na(train$Age)])
length(train)
length(train$Age)
class(train$Age)
train$Age[is.na(train$Age)]<-mean(train$Age[!is.na(train$Age)])
length(is.na(train$Age))
summary(train)
length(is.na(train$Age)==TRUE)
length(is.na(train$Age)==F)
length(is.na(train$Age)==FALSE)
is.na(train$Age)
is.na(train$Age)==TRUE
train[is.na(train$Age)==TRUE]
train$Age[is.na(train$Age)==TRUE]
train$Age[is.na(train$Age)==F]
train$Age[is.na(train$Age)]
q()
q()
head(train)
library(psych)
fa.parallel(train[,-2],fa="pc",n.itec=100,show.legend=FALSE)
fa.parallel(train[,-2],fa="pc",n.iter=100,show.legend=FALSE)
summary(train)
str(train)
fa.parallel(train[,-2],fa="pc",n.iter=100,show.legend=FALSE)
??fa.parallel
train$Sex[train$Sex=='male']<-1
train$Sex[train$Sex=='female']<-2
str(train)
train$Sex<-as.numeric(train$Sex)
str(train)
train$Sex<-as.integer(train$Sex)
str(train)
train$Embarked[train$Embarked=='C']<-1
train$Embarked[train$Embarked=='Q']<-2
train$Embarked[train$Embarked=='S']<-3
train$Embarked<-as.integer(train$Embarked)
str(train)
fa.parallel(train[,c('Pclass','Sex','Age','SibSp','Parch','Embarked','Fsize')],fa="pc",n.iter=100,show.legend=FALSE)
pc<-principal(train[,c('Pclass','Sex','Age','SibSp','Parch','Embarked','Fsize')],nfactors=6)
pc
pc
pc<-principal(train[,c('Pclass','Sex','Age','SibSp','Parch','Embarked','Fsize')],nfactors=6,rotate='varimax')
pc
pc<-principal(train[,c('Pclass','Sex','Age','SibSp','Parch','Embarked','Fsize')],nfactors=6,rotate='varimax',score=TRUE)
pc
head(pc$scores)
q()
require(mxnet)
require(asdfds)
re<-require(sdfsd)
re
if(require(dsf)){}
if(require(dsf)){ print("no") } else { print("yes") }
if(require("sdfds")){ print("no") } else { print("yes") }
test#re
if(require("sdfsd")){
print("no")
}
else {
print("yes")
}
}
}
if(require("lme4")){
    print("lme4 is loaded correctly")
} else {
    print("trying to install lme4")
    install.packages("lme4")
    if(require(lme4)){
        print("lme4 installed and loaded")
    } else {
        stop("could not install lme4")
    }
}
if(require("sdfsd")){
print("no")
} else {
print("yes")
}
require("sdfsd")
if(require("sdfsd")){
print("yes")
} else {
print("no")
}
a<-mx.nd.zeros(c(2,3))
a
b<-mx.rnorm(c(4,5))
b
as.array(a)
class(as.array(a))
class(b)
mx.nd.ones(c(2,4))*2
mx.nd.ones(2:4)*2
c(2,4)
2:4
a<-mx.nd.ones(c(2,3), mx.gpu())
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/GPU"
options(repos = cran)
install.packages("mxnet")
mx.nd.save(list(a),"temp.ndarray")
mx.nd.load("temp.ndarray")
a<-mx.nd.ones(c(2,3))
c<-mx.nd.copyto(a,mx.cpu())
c
a
c11<-mx.nd.copyto(a,mx.cpu())
c11
c11<-mx.nd.copyto(mx.nrom(c(2,4)),mx.cpu())
c11<-mx.nd.copyto(mx.nnorm(c(2,4)),mx.cpu())
c11<-mx.nd.copyto(mx.rnorm(c(2,4)),mx.cpu())
c11
q()
clear
require(mxnet)
net<-mx.symbol.Variable("data")
net<-mx.symbol.FullyConnected(data=net,name="fc1",num_hiddlen=128)
net<-mx.symbol.FullyConnected(data=net,name="fc1",num_hidden=128)
net<-mx.symbol.Activation(data=net,name="relu1",act_type="relu")
net<-mx.symbol.FullyConnected(data=net,name="fc2",num_hidden=64)
net<-mx.symbol.Softmax(data=net,name="out")
class(net)
arguments(net)
require(mlbench)
install.packages("mlbench")
require(mlbench)
data(Sonar, package="mlbench")
head(Sonar)
head(Sonar[,61],10)
head(Sonar[,61],20)
Sonar[,61]<-as.numeric(Sonar[,61])-1
train.ind<-c(1:50,100:150)
train.x<-data.matrix(Sonar[train.ind,1:60])
train.y<-Sonar[train.ind,61]
test.x<-data.matrix(Sonar[-train.ind,1:60])
test.y<-Sonar[-train.ind,61]
mx.set.seed(123)
model<-mx.mlp(train.x,train.y,hidden_node=10,out_node=2,out_activation="softmax",num.round=20,array.batch.size=15,learning.rate=0.07,momentum=0.9,eval.metric=mx.metric.accuracy)
graph.viz(model$symbol)
arguments(model)
preds<-predict(model,test.x)
head(preds)
pred.label<-max.col(t(preds))-1
table(pred.label,test.y)
t(preds)
model<-mx.mlp(train.x,train.y,hidden_node=10,out_node=2,out_activation="softmax",num.round=2000,array.batch.size=15,learning.rate=0.07,momentum=0.9,eval.metric=mx.metric.accuracy)
preds<-predict(model,test.x)
pred.label<-max.col(t(preds))-1
t(preds)
table(pred.label,test.y)
q()
fc1<-mx.symbol.FullyConnected(data, num_hidden=1)
require(mxnet)
fc1<-mx.symbol.FullyConnected(data, num_hidden=1)
data
data<-mx.symbol.Variable("data")
fc1<-mx.symbol.FullyConnected(data, num_hidden=1)
fc1<-mx.symbol.FullyConnected(data, num_hidden=10)
act1<-mx.symbol.Activation(fc1, "tanh")
act1<-mx.symbol.Activation(data=fc1, act_type="tanh")
act1<-mx.symbol.Activation(fc1, act_type="tanh")
fc2<-mx.symbol.FullyConnected(act1, num_hidden=2)
outlast<-mx.symbol.SoftmaxOutput(fc2)
mx.set.seed(123)
model2<-mx.model.FeedForward.create(outlast,x=train.x,y=train.y,num.round=20,array.batch.size=15,learning.rate=0.07,momentum=0.9,eval.metric=mx.metric.accuracy)
model2<-mx.model.FeedForward.create(outlast,X=train.x,y=train.y,num.round=20,array.batch.size=15,learning.rate=0.07,momentum=0.9,eval.metric=mx.metric.accuracy)
model2<-mx.model.FeedForward.create(outlast,X=train.x,y=train.y,num.round=100,array.batch.size=15,learning.rate=0.07,momentum=0.9,eval.metric=mx.metric.accuracy)
preds<-predict(model,test.x)
graph.viz(model$symbol)
str(model)
q()
data(BostonHousing, package="mlbench")
head(BostonHousing)
train.ind<-seq(1,506,3)
train.x<-data.matrix(BostonHousing[train.ind,-14])
str(BostonHousing)
head(BostonHousing[:,14])
head(BostonHousing[:1,14])
head(BostonHousing[0:1,14])
head(BostonHousing[1:1,14])
class(BostonHousing)
train.y<-BostonHousing[train.ind,14]
test.x<-data.matrix(BostonHousing[-train.ind,-14])
test.y<-BostonHousing[-train.ind,14]
data<-mx.symbol.Variable("data")
require(mxnet)
data<-mx.symbol.Variable("data")
fc1<-mx.symbol.FullyConnected(data, num_hidden=1)
lro<-mx.symbol.LinearRegressionOutput(fc1)
mx.set.seed(0)
model<-mx.model.FeedForward.create(lro,X=train.x,y=train.y,num.round=50,array.batch.size=20,learning.rate=2e-6,momentum=0.9,eval.metric=mx.metric.rmse)
model<-mx.model.FeedForward.create(lro,X=train.x,y=train.y,num.round=500,array.batch.size=20,learning.rate=2e-6,momentum=0.9,eval.metric=mx.metric.rmse)
preds<-predict(model,test.x)
sqrt(mean(preds-test.y)^2)
demo.metric.mae<-mx.metric.custom("mae",function(label,pred){res<-mean(abs(label-pred)) return(res)})
demo.metric.mae<-mx.metric.custom("mae",function(label,pred){res<-mean(abs(label-pred)) return(res)})
    })
demo.metric.mae <- mx.metric.custom("mae", function(label, pred) {
res <- mean(abs(label-pred))
return(res)
})
model<-mx.model.FeedForward.create(lro,X=train.x,y=train.y,num.round=500,array.batch.size=20,learning.rate=2e-6,momentum=0.9,eval.metric=demo.metirc.mae)
model<-mx.model.FeedForward.create(lro,X=train.x,y=train.y,num.round=500,array.batch.size=20,learning.rate=2e-6,momentum=0.9,eval.metric=demo.metric.mae)
q()
q()
q()
q()
setwd('G:/tinymind')
q()
